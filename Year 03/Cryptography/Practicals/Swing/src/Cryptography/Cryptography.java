package Cryptography;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

public class Cryptography extends javax.swing.JFrame {

     // Creates new form Cryptography
    public Cryptography() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        ISBN_Label = new javax.swing.JLabel();
        Credit_Card_Label = new javax.swing.JLabel();
        Hamming_Label = new javax.swing.JLabel();
        BCH_Gen_Label = new javax.swing.JLabel();
        BCH_Dec_Label = new javax.swing.JLabel();
        SHA1_Gen_Label = new javax.swing.JLabel();
        SHA1_BF_Label = new javax.swing.JLabel();
        SHA1_BF2_Label = new javax.swing.JLabel();
        ISBN_Input = new javax.swing.JTextField();
        ISBN_Button = new javax.swing.JButton();
        Credit_Card_Button = new javax.swing.JButton();
        Credit_Card_Input = new javax.swing.JTextField();
        Hamming_Input = new javax.swing.JTextField();
        Hamming_Button = new javax.swing.JButton();
        BCH_Gen_Input = new javax.swing.JTextField();
        BCH_Gen_Button = new javax.swing.JButton();
        BCH_Dec_Input = new javax.swing.JTextField();
        BCH_Dec_Button = new javax.swing.JButton();
        SHA1_Gen_Input = new javax.swing.JTextField();
        SHA1_BF_Input = new javax.swing.JTextField();
        SHA1_Gen_Button = new javax.swing.JButton();
        SHA1_BF_Button = new javax.swing.JButton();
        SHA1_BF2_Input = new javax.swing.JTextField();
        SHA1_BF2_Button = new javax.swing.JButton();
        Message = new javax.swing.JLabel();
        Message2 = new javax.swing.JLabel();
        Message3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTextArea();
        Clear_Button = new javax.swing.JButton();
        BCH_Gen_Label1 = new javax.swing.JLabel();
        BCH_Gen_Button1 = new javax.swing.JButton();
        BCH_Gen_Input1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptography Toolkit - David Norton");

        Title.setFont(new java.awt.Font("HelveticaNeueLT Std UltLt", 0, 36)); // NOI18N
        Title.setText("Cryptography Toolkit");

        ISBN_Label.setText("ISBN Validator:");

        Credit_Card_Label.setText("Credit Card Validator:");

        Hamming_Label.setText("Hamming(10,6) Generator:");

        BCH_Gen_Label.setText("BCH(10,6) Generator:");

        BCH_Dec_Label.setText("BCH(10,6) Decoder:");

        SHA1_Gen_Label.setText("SHA1 Generator:");

        SHA1_BF_Label.setText("SHA1 Brute Force:");

        SHA1_BF2_Label.setText("SHA1 Brute Force (2 ints):");

        ISBN_Input.setText("0-19-853287-3");
        ISBN_Input.setToolTipText("Enter an ISBN number");

        ISBN_Button.setText("Validate");
        ISBN_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ISBN_ButtonMouseClicked(evt);
            }
        });

        Credit_Card_Button.setText("Validate");
        Credit_Card_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Credit_Card_ButtonMouseClicked(evt);
            }
        });

        Credit_Card_Input.setText("4485534942318753");
        Credit_Card_Input.setToolTipText("Enter a Credit Card number");

        Hamming_Input.setText("585676");
        Hamming_Input.setToolTipText("Enter a 6 digit number");

        Hamming_Button.setText("Generate");
        Hamming_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Hamming_ButtonMouseClicked(evt);
            }
        });

        BCH_Gen_Input.setText("000001");
        BCH_Gen_Input.setToolTipText("Enter a 6 digit number");

        BCH_Gen_Button.setText("Generate");
        BCH_Gen_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BCH_Gen_ButtonMouseClicked(evt);
            }
        });

        BCH_Dec_Input.setText("2745795878");
        BCH_Dec_Input.setToolTipText("Enter a 10 digit number");

        BCH_Dec_Button.setText("Decode");
        BCH_Dec_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BCH_Dec_ButtonMouseClicked(evt);
            }
        });

        SHA1_Gen_Input.setText("password");
        SHA1_Gen_Input.setToolTipText("Enter a password.");

        SHA1_BF_Input.setText("a94a8fe5ccb19ba61c4c0873d391e987982fbbd3");
        SHA1_BF_Input.setToolTipText("Enter a SHA1 hashed password (Original password must only contain lower case & numeric values. 6 characters maximum.");

        SHA1_Gen_Button.setText("Generate");
        SHA1_Gen_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SHA1_Gen_ButtonMouseClicked(evt);
            }
        });

        SHA1_BF_Button.setText("Brute Force");
        SHA1_BF_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SHA1_BF_ButtonMouseClicked(evt);
            }
        });

        SHA1_BF2_Input.setText("ec8e8ef82a9e9477c1e4e31a8120062ba7ef63c5");
        SHA1_BF2_Input.setToolTipText("Enter a SHA1 hashed password (Original password must only contain lower case & exactly 2 numeric values. 8 characters maximum.");

        SHA1_BF2_Button.setText("Brute Force");
        SHA1_BF2_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SHA1_BF2_ButtonMouseClicked(evt);
            }
        });

        Message.setText("Welcome to the Cryptography Toolkit!");

        Message2.setText("To use any of the tools below just enter a valid value, then click the corresponding button.");

        Message3.setText("The result will display at the bottom.");

        Result.setColumns(20);
        Result.setRows(5);
        jScrollPane1.setViewportView(Result);

        Clear_Button.setText("Clear");
        Clear_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Clear_ButtonMouseClicked(evt);
            }
        });

        BCH_Gen_Label1.setText("BCH(14,10) Generator:");

        BCH_Gen_Button1.setText("Generate");
        BCH_Gen_Button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BCH_Gen_Button1MouseClicked(evt);
            }
        });

        BCH_Gen_Input1.setText("8899880747");
        BCH_Gen_Input1.setToolTipText("Enter a 10 digit number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Message2)
                            .addComponent(Message3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Hamming_Label)
                                            .addComponent(Credit_Card_Label)
                                            .addComponent(ISBN_Label)
                                            .addComponent(BCH_Gen_Label1)
                                            .addComponent(BCH_Gen_Label)
                                            .addComponent(BCH_Dec_Label)
                                            .addComponent(SHA1_Gen_Label)
                                            .addComponent(SHA1_BF_Label)
                                            .addComponent(SHA1_BF2_Label))
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BCH_Gen_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(ISBN_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Credit_Card_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(BCH_Gen_Input1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Hamming_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(BCH_Dec_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(SHA1_Gen_Input)
                                            .addComponent(SHA1_BF_Input, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(SHA1_BF2_Input, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                                    .addComponent(jScrollPane1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BCH_Gen_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Hamming_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                        .addComponent(Credit_Card_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ISBN_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(BCH_Gen_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BCH_Dec_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SHA1_Gen_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SHA1_BF_Button)
                                    .addComponent(SHA1_BF2_Button)
                                    .addComponent(Clear_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Message)
                .addGap(4, 4, 4)
                .addComponent(Message2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Message3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ISBN_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ISBN_Button)
                    .addComponent(ISBN_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Credit_Card_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Credit_Card_Button)
                    .addComponent(Credit_Card_Label))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hamming_Label)
                    .addComponent(Hamming_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hamming_Button))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BCH_Gen_Label1)
                    .addComponent(BCH_Gen_Input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BCH_Gen_Button1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BCH_Gen_Label)
                    .addComponent(BCH_Gen_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BCH_Gen_Button))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BCH_Dec_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BCH_Dec_Button)
                    .addComponent(BCH_Dec_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SHA1_Gen_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SHA1_Gen_Button)
                    .addComponent(SHA1_Gen_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SHA1_BF_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SHA1_BF_Label)
                    .addComponent(SHA1_BF_Button))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SHA1_BF2_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SHA1_BF2_Button)
                    .addComponent(SHA1_BF2_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Clear_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ISBN_Input.getAccessibleContext().setAccessibleName("");
        SHA1_BF_Input.getAccessibleContext().setAccessibleDescription("Enter a SHA1 hashed password (40 characters).");
        SHA1_BF2_Input.getAccessibleContext().setAccessibleDescription("Enter a SHA1 hashed password. Original password must contain exactly 2 numeric values (40 characters).");
        BCH_Gen_Label1.getAccessibleContext().setAccessibleName("BCH(14,0) Generator:");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ISBN_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ISBN_ButtonMouseClicked

        // Get user input
        String isbn = ISBN_Input.getText();

        // Remove Symbols
        String isbnFormat = ISBN_Validator.removeSymbols(isbn);
        
        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(isbnFormat, 10);

        if ("Valid".equals(validInput)) {

            // Add ISBN to int array
            int[] intArray = SharedMethods.addToArray(isbnFormat);

            // Multiply ISBN values
            int ISBNTotal = ISBN_Validator.multiplyISBNValues(intArray);

            // Mod ISBN Total
            int ISBNMod = ISBN_Validator.modISBNTotal(ISBNTotal);

            // Get last Element Value
            int isbnLastElement = intArray[isbnFormat.length() - 1];

            // Check if ISBN is valid
            if (ISBNMod == isbnLastElement) {
                Result.setText("The ISBN is valid.");
            } else {
                Result.setText("The ISBN is not valid.");
            }
            
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_ISBN_ButtonMouseClicked

    private void Clear_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Clear_ButtonMouseClicked
        Result.setText("");
    }//GEN-LAST:event_Clear_ButtonMouseClicked

    private void Credit_Card_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Credit_Card_ButtonMouseClicked
        
        // Get user input
        String cardNumber = Credit_Card_Input.getText();
        
         // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(cardNumber, 16);

        if ("Valid".equals(validInput)) {
            
            // Add Credit Card number to int array
            int[] intArray = SharedMethods.addToArray(cardNumber);

            // Multiply alternate values
            Credit_Card_Validator.multiplyAlternateValues(intArray);

            // Total values
            int creditCardTotal = Credit_Card_Validator.totalValues(intArray);

            // Mod Credit Card Total
            int creditCardMod = Credit_Card_Validator.modCreditCardTotal(creditCardTotal);

            // Check if ISBN is valid
            if (creditCardMod == 0) {
                Result.setText("The Credit Card number is valid.");
            } else {
                Result.setText("The Credit Card number is not valid.");
            }
            
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_Credit_Card_ButtonMouseClicked

    private void Hamming_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Hamming_ButtonMouseClicked
        
        // Get user input
        String hammingNumber = Hamming_Input.getText();
        
         // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(hammingNumber, 6);

        if ("Valid".equals(validInput)) {
        
            // Generate 10 digit number from user input
            String finalValue = Hamming_Generator.getTenDigitEncodedValue(hammingNumber);

            // Print Result
            Result.setText("Hamming(10,6): " + finalValue);
        
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_Hamming_ButtonMouseClicked

    private void BCH_Gen_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BCH_Gen_ButtonMouseClicked
        
        // Get user input
        String BCHNumber = BCH_Gen_Input.getText();

        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(BCHNumber, 6);

        if ("Valid".equals(validInput)) {
               
            // Add number to int array
            int[] intArray = SharedMethods.addToArray(BCHNumber);

            // Assign user input to variables
            int d1 = intArray[0];
            int d2 = intArray[1];
            int d3 = intArray[2];
            int d4 = intArray[3];
            int d5 = intArray[4];
            int d6 = intArray[5];
            int d7 = BCH_Generator.getD7(d1, d2, d3, d4, d5, d6);
            int d8 = BCH_Generator.getD8(d1, d2, d3, d4, d5, d6);
            int d9 = BCH_Generator.getD9(d1, d2, d3, d4, d5, d6);
            int d10 = BCH_Generator.getD10(d1, d2, d3, d4, d5, d6);

            // Add parity bits if valid and print result
            String BCH_10_6 = BCH_Generator.addParityBits(d7, d8, d9, d10, BCHNumber);           
            Result.setText("BCH(10,6): " + BCH_10_6);
            
            // Print if valid
            if (d7 >= 10 || d8 >= 10 || d9 >= 10 || d10 >= 10) {
                Result.append("\nNumber unusable!");
            }
            
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_BCH_Gen_ButtonMouseClicked

    private void BCH_Gen_Button1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BCH_Gen_Button1MouseClicked

        // Get user input
        String BCHNumber = BCH_Gen_Input1.getText();
        
        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(BCHNumber, 10);

        if ("Valid".equals(validInput)) {

            // Add number to int array
            int[] intArray = SharedMethods.addToArray(BCHNumber);

            // Assign user input to variables
            int d1 = intArray[0];
            int d2 = intArray[1];
            int d3 = intArray[2];
            int d4 = intArray[3];
            int d5 = intArray[4];
            int d6 = intArray[5];
            int d7 = intArray[6];
            int d8 = intArray[7];
            int d9 = intArray[8];
            int d10 = intArray[9];

            // Get parity bits
            int s1 = BCH_Generator.getFirstParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s2 = BCH_Generator.getSecondParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s3 = BCH_Generator.getThirdParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s4 = BCH_Generator.getForthParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

            // Add parity bits if valid and print result
            String BCH_14_10 = BCH_Generator.addParityBits(s1, s2, s3, s4, BCHNumber);
            Result.setText("BCH(14,10): " + BCH_14_10);
            
            // Print if valid
            if (s1 >= 10 || s2 >= 10 || s3 >= 10 || s4 >= 10) {
                Result.append("\nNumber unusable!");
            }
            
        }  else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_BCH_Gen_Button1MouseClicked

    private void BCH_Dec_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BCH_Dec_ButtonMouseClicked
        
        // Get user input
        String BCHNumber = BCH_Dec_Input.getText();

        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInput(BCHNumber, 10);

        if ("Valid".equals(validInput)) {
        
            // Initialise Variables
            int p = 0, q = 0, r = 0, i=0, j=0, a=0, b=0;
            int error = 10;
            int[] intArray;

            // Add number to int array
            intArray = SharedMethods.addToArray(BCHNumber);

            // Assign user input to variables
            int d1 = intArray[0];
            int d2 = intArray[1];
            int d3 = intArray[2];
            int d4 = intArray[3];
            int d5 = intArray[4];
            int d6 = intArray[5];
            int d7 = intArray[6];
            int d8 = intArray[7];
            int d9 = intArray[8];
            int d10 = intArray[9];

            // Get parity bits
            int s1 = BCH_Generator.getFirstParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s2 = BCH_Generator.getSecondParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s3 = BCH_Generator.getThirdParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            int s4 = BCH_Generator.getForthParityBit(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

            // Check No Error
            if (s1 == 0 && s2 == 0 && s3 == 0 && s4 == 0) {
                error = 0;
            }

            // Check Single Error
            if (error != 0) {

                // Get P, Q & R
                p = BCH_Decoder.getP(s1, s2, s3);
                q = BCH_Decoder.getQ(s1, s2, s3, s4);
                r = BCH_Decoder.getR(s2, s3, s4);

                // Check Single Error
                if (p == 0 && q == 0 && r == 0) {
                    error = 1;
                }
            }

            // Check Double Error
            if (error != 0 && error != 1) {

                // Get Quadratic Equation Result
                int quadraticResult = BCH_Decoder.getQuadraticResult(p, q, r);

                // Get i & j
                i = BCH_Decoder.getI(p, q, quadraticResult);
                j = BCH_Decoder.getJ(p, q, quadraticResult);

                // Get a & b
                b = BCH_Decoder.getB(s1, s2, i, j);
                a = BCH_Decoder.getA(s1, b);

                // Check Double or Larger Error
                if (i != 0 && j != 0 && quadraticResult != 0) {
                    error = 2;
                } else {
                    error = 3;
                }
            }

            //Output Result.
            String result = BCH_Decoder.outputResult(s1, s2, s3, s4, p, q, r, 
                    i, j, a, b, error, BCHNumber, intArray);
            
            Result.setText(result);
            
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_BCH_Dec_ButtonMouseClicked

    private void SHA1_Gen_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SHA1_Gen_ButtonMouseClicked
                
        String SHA1PlainText = SHA1_Gen_Input.getText();
        
        try {
            Result.setText("SHA1 Hash: " + SHA1.SHA1(SHA1PlainText));
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
            Result.setText("Something has gone wrong!");
        }
    }//GEN-LAST:event_SHA1_Gen_ButtonMouseClicked

    private void SHA1_BF_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SHA1_BF_ButtonMouseClicked
        
        // Get user input
        String encodedHash = SHA1_BF_Input.getText();

        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInputHash(encodedHash, 40);

        if ("Valid".equals(validInput)) {

            Result.setText("Brute Forcing...\n");

            // Start timer.
            long startTime = System.nanoTime();

            // Loop from 1 to the maximum number of characters
            for (int wordLength = 1; wordLength <= SHA1_Brute_Force.MAX_WORD_LENGTH; wordLength++) {
                try {
                    // Generate all combinations for the word length and check for a match.
                    if (SHA1_Brute_Force.generate(wordLength, SHA1_Brute_Force.charSet, encodedHash)) {
                        Result.append("\n\nMatch found!! The decrypted string is : " + SHA1_Brute_Force.answer);
                        break;
                    } else {
                        Result.append("\nPassword has more than " + wordLength + " characters");
                    }
                } catch (UnsupportedEncodingException | NoSuchAlgorithmException ex) {
                    Result.setText("Something has gone wrong!");
                }
            }

            // Work out time elapsed.
            long endTime = System.nanoTime();
            long duration = (endTime - startTime) / 1000000000;
            Result.append("\nTime taken: " + duration + " seconds");
        
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_SHA1_BF_ButtonMouseClicked

    private void SHA1_BF2_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SHA1_BF2_ButtonMouseClicked

        // Get user input
        String encodedHash = SHA1_BF2_Input.getText();

        // Check if input is valid
        String validInput = SharedMethods.checkFixedLengthInputHash(encodedHash, 40);

        if ("Valid".equals(validInput)) {

            Result.setText("Brute Forcing...\n");

            // Start timer.
            long startTime = System.nanoTime();

            // Loop from 1 to the maximum number of characters
            for (int wordLength = 1; wordLength <= SHA1_Brute_Force_v2.MAX_WORD_LENGTH; wordLength++) {
                try {
                    // Generate all combinations for the word length and check for a match.
                    if (SHA1_Brute_Force_v2.generate(wordLength, SHA1_Brute_Force_v2.charSet, encodedHash)) {
                        Result.append("\n\nMatch found!! The decrypted string is : " + SHA1_Brute_Force_v2.answer);
                        break;
                    } else {
                        Result.append("\nPassword has more than " + wordLength + " characters");
                    }
                } catch (UnsupportedEncodingException | NoSuchAlgorithmException ex) {
                    Result.setText("Something has gone wrong!");
                }
            }

            // Work out time elapsed.
            long endTime = System.nanoTime();
            long duration = (endTime - startTime) / 1000000000;
            Result.append("\nTime taken: " + duration + " seconds");
        
        } else {
            Result.setText(validInput);
        }
    }//GEN-LAST:event_SHA1_BF2_ButtonMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cryptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Cryptography().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCH_Dec_Button;
    private javax.swing.JTextField BCH_Dec_Input;
    private javax.swing.JLabel BCH_Dec_Label;
    private javax.swing.JButton BCH_Gen_Button;
    private javax.swing.JButton BCH_Gen_Button1;
    private javax.swing.JTextField BCH_Gen_Input;
    private javax.swing.JTextField BCH_Gen_Input1;
    private javax.swing.JLabel BCH_Gen_Label;
    private javax.swing.JLabel BCH_Gen_Label1;
    private javax.swing.JButton Clear_Button;
    private javax.swing.JButton Credit_Card_Button;
    private javax.swing.JTextField Credit_Card_Input;
    private javax.swing.JLabel Credit_Card_Label;
    private javax.swing.JButton Hamming_Button;
    private javax.swing.JTextField Hamming_Input;
    private javax.swing.JLabel Hamming_Label;
    private javax.swing.JButton ISBN_Button;
    public javax.swing.JTextField ISBN_Input;
    private javax.swing.JLabel ISBN_Label;
    private javax.swing.JLabel Message;
    private javax.swing.JLabel Message2;
    private javax.swing.JLabel Message3;
    private javax.swing.JTextArea Result;
    private javax.swing.JButton SHA1_BF2_Button;
    private javax.swing.JTextField SHA1_BF2_Input;
    private javax.swing.JLabel SHA1_BF2_Label;
    private javax.swing.JButton SHA1_BF_Button;
    private javax.swing.JTextField SHA1_BF_Input;
    private javax.swing.JLabel SHA1_BF_Label;
    private javax.swing.JButton SHA1_Gen_Button;
    private javax.swing.JTextField SHA1_Gen_Input;
    private javax.swing.JLabel SHA1_Gen_Label;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
